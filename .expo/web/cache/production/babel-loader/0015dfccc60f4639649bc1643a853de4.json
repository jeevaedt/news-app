{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _native=_interopRequireDefault(require(\"styled-components/native\"));var _styledSystem=require(\"styled-system\");var _useThemeProps=require(\"../../../hooks/useThemeProps\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Spinner/index.tsx\";var StyledSpinner=(0,_native.default)(_reactNative.ActivityIndicator)(_styledSystem.color,_styledSystem.space,_styledSystem.position);var Spinner=function Spinner(props,ref){var resolvedProps=(0,_useThemeProps.usePropsResolution)('Spinner',props);return _react.default.createElement(StyledSpinner,(0,_extends2.default)({accessible:true,accessibilityLabel:\"loading\"},resolvedProps,{ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:16,columnNumber:5}}));};var _default=(0,_react.memo)((0,_react.forwardRef)(Spinner));exports.default=_default;","map":{"version":3,"sources":["index.tsx"],"names":["StyledSpinner","ActivityIndicator","color","space","position","Spinner","resolvedProps"],"mappings":"wUAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,C,wDAEA,GAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA,CACA,GAAA,CAAA,aAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,OAAA,gCAAA,C,mIAGA,GAAMA,CAAAA,aAAa,CAAG,CAAA,EAAA,OAAA,CAAA,OAAA,EAAOC,YAAAA,CAAP,iBAAA,EACpBC,aAAAA,CADoB,KAAA,CAEpBC,aAAAA,CAFoB,KAAA,CAGpBC,aAAAA,CAHF,QAAsB,CAAtB,CAKA,GAAMC,CAAAA,OAAO,CAAPA,QAAAA,CAAAA,OAAAA,CAAU,KAAVA,CAAU,GAAVA,CAA8C,CAClD,GAAMC,CAAAA,aAAa,CAAG,CAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,SAAA,CAAtB,KAAsB,CAAtB,CACA,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CACE,UAAU,CADZ,IAAA,CAEE,kBAAkB,CAFpB,SAAA,CAAA,CAAA,aAAA,CAAA,CAIE,GAAG,CAJL,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CADF,CACE,CAAA,CAAA,CAAA,CADF,CAFF,CAAA,C,aAYe,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,CAAA,EAAA,MAAA,CAAA,UAAA,EAAL,OAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport styled from 'styled-components/native';\nimport { color, space, position } from 'styled-system';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ISpinnerProps } from './types';\n\nconst StyledSpinner = styled(ActivityIndicator)<ISpinnerProps>(\n  color,\n  space,\n  position\n);\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const resolvedProps = usePropsResolution('Spinner', props);\n  return (\n    <StyledSpinner\n      accessible\n      accessibilityLabel=\"loading\"\n      {...resolvedProps}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"script"}